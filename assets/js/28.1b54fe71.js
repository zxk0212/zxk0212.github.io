(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{400:function(t,a,r){"use strict";r.r(a);var e=r(42),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"设计模式概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式概述"}},[t._v("#")]),t._v(" 设计模式概述")]),t._v(" "),r("p",[t._v("设计模式就是某些问题的通用解决方案，设计模式代表了最佳实践。")]),t._v(" "),r("p",[t._v("设计模式本质是提高软件的维护性，通用性和扩展性，并降低软件的复杂度")]),t._v(" "),r("h2",{attrs:{id:"设计模式的分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的分类"}},[t._v("#")]),t._v(" 设计模式的分类")]),t._v(" "),r("h3",{attrs:{id:"创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),r("h4",{attrs:{id:"什么是创建者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是创建者模式"}},[t._v("#")]),t._v(" 什么是创建者模式")]),t._v(" "),r("h5",{attrs:{id:"创建型模式是处理对象创建的设计模式-试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题-或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式是处理对象创建的设计模式-试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题-或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。"}},[t._v("#")]),t._v(" 创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。")]),t._v(" "),r("h4",{attrs:{id:"创建者模式的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建者模式的定义"}},[t._v("#")]),t._v(" 创建者模式的定义")]),t._v(" "),r("p",[t._v("创建型模式旨在将系统与它的对象创建、结合、表示的方式分离。这些设计模式在对象创建的类型、主体、方式、时间等方面提高了系统的灵活性")]),t._v(" "),r("h5",{attrs:{id:"创建型模式由两个主导思想构成。一是将系统使用的具体类封装起来-二是隐藏这些具体类的实例创建和结合的方式。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式由两个主导思想构成。一是将系统使用的具体类封装起来-二是隐藏这些具体类的实例创建和结合的方式。"}},[t._v("#")]),t._v(" 创建型模式由两个主导思想构成。一是将系统使用的具体类封装起来，二是隐藏这些具体类的实例创建和结合的方式。")]),t._v(" "),r("h4",{attrs:{id:"常用的创建者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用的创建者模式"}},[t._v("#")]),t._v(" 常用的创建者模式")]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"./singleton"}},[t._v("单例模式")]),t._v(" (Singleton pattern)")]),t._v(" "),r("li",[r("a",{attrs:{href:"./abstractFactory"}},[t._v("抽象工厂")]),t._v(" (Abstract Factory)")]),t._v(" "),r("li",[r("a",{attrs:{href:"./builder"}},[t._v("生成器")]),t._v(" (Builder Pattern)")]),t._v(" "),r("li",[r("a",{attrs:{href:"./factoryMethod"}},[t._v("工厂方法")]),t._v(" (Factory Method pattern)")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("原型")]),t._v(" (Prototype pattern)")])]),t._v(" "),r("h3",{attrs:{id:"结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"./Adaptee"}},[t._v("适配器")]),t._v("（Adapter pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:"./Bridge"}},[t._v("桥接")]),t._v("（Bridge pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:"./Composite"}},[t._v("组合")]),t._v("（Composite pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:"./Decorator"}},[t._v("装饰")]),t._v("（Decorator pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:"./Facade"}},[t._v("外观")]),t._v("（Facade pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("享元")]),t._v("（Flyweight pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("代理")]),t._v("（Proxy pattern）")])]),t._v(" "),r("h3",{attrs:{id:"行为型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:""}},[t._v("责任链")]),t._v("（Chain-of-responsibility pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("命令")]),t._v("（Command pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("翻译器")]),t._v("（Interpreter pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("迭代器")]),t._v("（Iterator pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("中介者")]),t._v("（Mediator pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("回忆")]),t._v("（Memento pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("观察者")]),t._v("（Observer pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("状态机")]),t._v("（State pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("策略")]),t._v("（Strategy pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("模板方法")]),t._v("（Template method pattern）")]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("参观者")]),t._v("（Visitor）")])])])}),[],!1,null,null,null);a.default=v.exports}}]);